# -*- coding: utf-8 -*-
"""may_8_2019_data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u73j6m3aYHrnjrtqbaG85EGri9MjXpTd
"""

colorado = 'https://data.colorado.gov/resource/team-3ugz.json'
import pandas as pd
import urllib.request, json

"""### explore colorado electric vehicle charging station availability"""

with urllib.request.urlopen(colorado) as url:
  data = json.loads(url.read().decode())

# save the raw data into a local file for reference and spot checks    
df = pd.DataFrame.from_records(data)
df.to_csv('colorado.csv', index = None, header=True)

df.head()

# remove a dict containing lat and long coordinates bcs they're already present in df
df.drop("location_1", axis=1, inplace=True)

"""### separate out low cardinality data elements from high cardinality"""

unique_counts = pd.DataFrame.from_records([(col, df[col].nunique()) for col in df.columns], 
                                          columns=['Column_Name', 'Num_Unique']).sort_values(by=['Num_Unique'])

unique_counts

"""### look at distinct vals in low cardinality data elements"""

from collections import defaultdict
low_card_attribs = defaultdict(list)

for col in df.columns:
    if df[col].nunique() < 10:
        key = col
        val = df[col].unique().tolist()
        low_card_attribs[key].append(val)

low_card_attribs

"""### bring in a lookup data element if the city is one of the top ten cities in colorado by size"""

top_ten = "https://www.homes.com/f/colorado/homes-for-sale/top-10-most-populated-cities/"
top_ten_df, = pd.read_html(top_ten, header=0)
top_ten_cities_in_colorado = top_ten_df['City'].tolist()

top_ten_cities_in_colorado

"""### just a few columns"""

low_card_cols = ['ev_network','groups_with_access_code']
hi_card_cols = ['station_name', 'street_address', 'city', 'access_days_time', 'date_last_confirmed', 'station_phone', 'id']
cols_to_filter = low_card_cols + hi_card_cols
df_small = df[cols_to_filter]

def is_top_ten_city(city):
  return city in top_ten_cities_in_colorado

df_small['Top_Ten_Size_City'] = df_small.city.apply(is_top_ten_city)

top_ten_filter = df_small['Top_Ten_Size_City'] == True
df_small[top_ten_filter]

df_small.to_csv('colorado_ev_charging.csv', index = None, header=True)

from google.colab import files
files.download('colorado_ev_charging.csv')

